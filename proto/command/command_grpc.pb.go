// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package command

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CasbinMeshClient is the client API for CasbinMesh service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CasbinMeshClient interface {
	Request(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	Enforce(ctx context.Context, in *EnforceRequest, opts ...grpc.CallOption) (*EnforceResponse, error)
}

type casbinMeshClient struct {
	cc grpc.ClientConnInterface
}

func NewCasbinMeshClient(cc grpc.ClientConnInterface) CasbinMeshClient {
	return &casbinMeshClient{cc}
}

func (c *casbinMeshClient) Request(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/command.CasbinMesh/Request", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *casbinMeshClient) Enforce(ctx context.Context, in *EnforceRequest, opts ...grpc.CallOption) (*EnforceResponse, error) {
	out := new(EnforceResponse)
	err := c.cc.Invoke(ctx, "/command.CasbinMesh/Enforce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CasbinMeshServer is the server API for CasbinMesh service.
// All implementations must embed UnimplementedCasbinMeshServer
// for forward compatibility
type CasbinMeshServer interface {
	Request(context.Context, *Command) (*Response, error)
	Enforce(context.Context, *EnforceRequest) (*EnforceResponse, error)
	mustEmbedUnimplementedCasbinMeshServer()
}

// UnimplementedCasbinMeshServer must be embedded to have forward compatible implementations.
type UnimplementedCasbinMeshServer struct {
}

func (UnimplementedCasbinMeshServer) Request(context.Context, *Command) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Request not implemented")
}
func (UnimplementedCasbinMeshServer) Enforce(context.Context, *EnforceRequest) (*EnforceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enforce not implemented")
}
func (UnimplementedCasbinMeshServer) mustEmbedUnimplementedCasbinMeshServer() {}

// UnsafeCasbinMeshServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CasbinMeshServer will
// result in compilation errors.
type UnsafeCasbinMeshServer interface {
	mustEmbedUnimplementedCasbinMeshServer()
}

func RegisterCasbinMeshServer(s grpc.ServiceRegistrar, srv CasbinMeshServer) {
	s.RegisterService(&CasbinMesh_ServiceDesc, srv)
}

func _CasbinMesh_Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinMeshServer).Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.CasbinMesh/Request",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinMeshServer).Request(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _CasbinMesh_Enforce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnforceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CasbinMeshServer).Enforce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/command.CasbinMesh/Enforce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CasbinMeshServer).Enforce(ctx, req.(*EnforceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CasbinMesh_ServiceDesc is the grpc.ServiceDesc for CasbinMesh service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CasbinMesh_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "command.CasbinMesh",
	HandlerType: (*CasbinMeshServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Request",
			Handler:    _CasbinMesh_Request_Handler,
		},
		{
			MethodName: "Enforce",
			Handler:    _CasbinMesh_Enforce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "command.proto",
}
