syntax = "proto3";

package command;

option go_package = "/;command";

service CasbinMesh {
  rpc ShowStats(StatsRequest)returns(StatsResponse){}
  rpc ListNamespaces(ListNamespacesRequest) returns (ListNamespacesResponse){}
  rpc PrintModel(PrintModelRequest) returns (PrintModelResponse){}
  rpc ListPolicies(ListPoliciesRequest) returns (ListPoliciesResponse){}
  rpc Request(Command) returns (Response){}
  rpc Enforce(EnforceRequest) returns (EnforceResponse){}
}
message StatsRequest{

}
message StatsResponse{
  bytes payload =1;
}
message PrintModelRequest{
  map<string,string> metadata =1;
  string namespace = 2;
}

message PrintModelResponse{
  string error = 1;
  string model = 2;
}

message ListPoliciesRequest{
  map<string,string> metadata =1;
  string namespace = 2;
}

message ListPoliciesPayload {
  string cursor =1;
  int64 skip = 2;
  int64 limit = 3;
  bool reverse = 4;
}

message ListPoliciesResponse{
  map<string,string> metadata =1;
  repeated StringArray policies = 2;
}

message ListNamespacesRequest{
  map<string,string> metadata =1;
}

message ListNamespacesResponse{
  string error = 1;
  repeated string namespace = 2;
}

message StringArray {
  repeated string s = 1;
}

message EnforcePayload {
  repeated bytes b = 1;
  bool timings = 2;
  enum Level {
    QUERY_REQUEST_LEVEL_NONE = 0;
    QUERY_REQUEST_LEVEL_WEAK = 1;
    QUERY_REQUEST_LEVEL_STRONG = 2;
  }
  Level level = 3;
  int64 freshness = 4;
}

message SetModelFromString{
  string text=1;
}

message AddPoliciesPayload {
  string sec = 1;
  string pType = 2;
  repeated StringArray rules = 3;
}

message RemovePoliciesPayload {
  string sec = 1;
  string pType = 2;
  repeated StringArray rules = 3;
}

message RemoveFilteredPolicyPayload {
  string sec = 1;
  string pType = 2;
  int32  fieldIndex = 3;
  repeated string fieldValues = 4;
}

message UpdatePolicyPayload {
  string sec = 1;
  string pType = 2;
  repeated string newRule = 3;
  repeated string oldRule = 4;
}

message UpdatePoliciesPayload {
  string sec = 1;
  string pType = 2;
  repeated StringArray newRules = 3;
  repeated StringArray oldRules = 4;
}

enum Type {
  COMMAND_TYPE_METADATA_SET = 0;
  COMMAND_TYPE_METADATA_DELETE = 1;
  COMMAND_TYPE_NOOP = 2;

  COMMAND_TYPE_ENFORCE_REQUEST = 3;
  COMMAND_TYPE_ADD_POLICIES = 4;
  COMMAND_TYPE_REMOVE_POLICIES = 5;
  COMMAND_TYPE_REMOVE_FILTERED_POLICY = 6;
  COMMAND_TYPE_UPDATE_POLICIES = 7;
  COMMAND_TYPE_CLEAR_POLICY = 8;
  COMMAND_TYPE_SET_MODEL=9;
  COMMAND_TYPE_CREATE_NAMESPACE=10;
  COMMAND_TYPE_LIST_NAMESPACES=11;
  COMMAND_TYPE_PRINT_MODEL=12;
  COMMAND_TYPE_LIST_POLICIES=13;
}

message Command {
  Type type = 1;
  // namespace
  string namespace = 2;
  // payload
  bytes payload = 3;
  // metadata
  map<string,string> metadata =4;
}

message EnforceRequest {
  string namespace = 1;
  EnforcePayload payload = 2;
}

message EnforceResponse {
  bool ok = 1;
  string error = 2;
}

message Response {
  string error = 1;
  repeated StringArray effectedRules=2;
  bool effected=3;
}

message MetadataSet {
  string raft_id = 1;
  map<string, string> data = 2;
}

message MetadataDelete {
  string raft_id = 1;
}
